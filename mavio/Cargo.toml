[package]
name = "mavio"
description = "Minimalistic MAVLink client that supports `no-std` and `no-alloc` targets."
version = "0.5.0-rc.1"
edition = "2021"
authors = ["Mykhailo Ziatin <ziatin@mathwithoutend.org>"]
repository = "https://gitlab.com/mavka/libs/mavio"
readme = "../README.md"
license = "MIT OR Apache-2.0"
homepage = "https://mavka.gitlab.io/home/projects/mavio"
keywords = ["MAVLink", "UAV", "drones"]
categories = [
    "aerospace::protocols",
    "aerospace::drones",
    "aerospace::unmanned-aerial-vehicles",
    "no-std",
    "no-std::no-alloc",
]
resolver = "2"
include = [
    "src",
    "Cargo.toml"
]

[lib]
name = "mavio"
path = "src/lib.rs"

###########################################################
# Dependencies
###########################################################
[dependencies]
# GEneral dependencies
bitflags = { version = "2.5.0", default-features = false }
crc-any = { version = "2.4.4", default-features = false }
mavspec = { version = "0.6.0-rc.1", default-features = false, features = ["rust", "rust-dialects"] }
tbytes = { version = "0.1.0", default-features = false }
sha2 = { version = "0.10.8", default-features = false, optional = true }
thiserror = { version = "2.0.9", optional = true }

# Serde
serde = { version = "1.0.197", default-features = false, features = ["derive"], optional = true }
serde_arrays = { version = "0.1.0", default-features = false, optional = true }

# Specta
specta = { version = "=2.0.0-rc.22", features = ["derive"], optional = true }
specta-util = { version = "0.0.9", optional = true }

# I/O providers
tokio = { version = "1.36.0", features = ["io-util"], optional = true }
futures = { version = "0.3.31", optional = true }
embedded-io = { version = "0.6.1", optional = true }
embedded-io-async = { version = "0.6.1", optional = true }

# Documentation
document-features = { version = "0.2.10", optional = true }

###########################################################
# Features
###########################################################
[features]
#==========================================================
#! ## Generic features
#==========================================================

## Default features (nothing is enabled).
default = []
## Enable unstable API features.
unstable = ["mavspec/unstable"]
## Additional auxilary tools.
extras = []
## Unsafe features, that allow access to internal state of the entities.
unsafe = []

## Enable memory allocation support.
alloc = [
    "mavspec/alloc",
    "serde/alloc",
    "tbytes/alloc",
    "embedded-io/alloc",
    "embedded-io-async/alloc",
]
## Enable Rust std library.
std = [
    "alloc",
    "mavspec/std",
    "serde/std",
    "sha2/std",
    "tbytes/std",
    "dep:thiserror",
    "bitflags/std",
    "embedded-io/std",
    "embedded-io-async/std",
    "dep:document-features",
]

## Enable sha2 backend for message signing
sha2 = ["dep:sha2"]

#==========================================================
#! ## Serialization and reflection
#==========================================================
#! These features enable [serde](https://serde.rs) and [specta](https://specta.dev) support.

## Enable serde support.
serde = [
    "dep:serde",
    "dep:serde_arrays",
    "mavspec/serde",
    "bitflags/serde",
]
## Enable specta support.
specta = [
    "dep:specta",
    "dep:specta-util",
    "mavspec/specta",
]

#==========================================================
#! ## I/O providers
#==========================================================
#! These features enable I/O providers such as Tokio or embedded-io

## Enable async support via futures-rs
futures = ["dep:futures"]
## Enable async support via Tokio
tokio = [
    "dep:tokio",
    "std",
]
## Enable synchronous I/O support from embedded HAL
embedded-io = ["dep:embedded-io"]
## Enable asynchronous I/O support from embedded HAL
embedded-io-async = [
    "dep:embedded-io",
    "dep:embedded-io-async",
]

#==========================================================
#! ## Dialects
#==========================================================
#! Bundle standard MAVLink dialects as defined in XML
#! [message definitions](https://gitlab.com/mavka/spec/protocols/mavlink/message-definitions-v1.0) generated by
#! [MAVSpec](https://crates.io/crates/mavspec).

## Include `ardupilotmega` dialect
dlct-ardupilotmega = ["dlct-common", "mavspec/dlct-ardupilotmega"]
## Include `ASLUAV` dialect
dlct-asluav = ["dlct-common", "mavspec/dlct-asluav"]
## Include `AVSSUAS` dialect
dlct-avssuas = ["dlct-common", "mavspec/dlct-avssuas"]
## Include `common` dialect
dlct-common = ["dlct-minimal", "mavspec/dlct-common"]
## Include `csAirLink` dialect
dlct-cs_air_link = ["mavspec/dlct-cs_air_link"]
## Include `cubepilot` dialect
dlct-cubepilot = ["dlct-common", "mavspec/dlct-cubepilot"]
## Include `development` dialect
dlct-development = ["dlct-common", "mavspec/dlct-development"]
## Include `icarous` dialect
dlct-icarous = ["mavspec/dlct-icarous"]
## Include `matrixpilot` dialect
dlct-matrixpilot = ["dlct-common", "mavspec/dlct-matrixpilot"]
## Include `minimal` dialect
dlct-minimal = ["mavspec/dlct-minimal"]
## Include `paparazzi` dialect
dlct-paparazzi = ["dlct-common", "mavspec/dlct-paparazzi"]
## Include `standard` dialect
dlct-standard = ["dlct-minimal", "mavspec/dlct-standard"]
## Include `ualberta` dialect
dlct-ualberta = ["dlct-common", "mavspec/dlct-ualberta"]
## Include `uAvionix` dialect
dlct-uavionix = ["dlct-common", "mavspec/dlct-uavionix"]

## Include `all` meta-dialect
all = [
    "dlct-ardupilotmega",
    "dlct-common",
    "dlct-asluav",
    "dlct-avssuas",
    "dlct-cs_air_link",
    "dlct-cubepilot",
    "dlct-development",
    "dlct-icarous",
    "dlct-matrixpilot",
    "dlct-minimal",
    "dlct-paparazzi",
    "dlct-standard",
    "dlct-ualberta",
    "dlct-uavionix",
    "mavspec/dlct-all",
]

#==========================================================
#! ## MAVLink microservices
#==========================================================
#! These features will control generation of MAVLink microservice-specific bindings.

## Support for all MavLink microservices
msrv-all = [
    "msrv-heartbeat",
    "msrv-mission",
    "msrv-parameter",
    "msrv-parameter-ext",
    "msrv-command",
    "msrv-manual-control",
    "msrv-camera",
    "msrv-gimbal-v1",
    "msrv-gimbal-v2",
    "msrv-arm-auth",
    "msrv-image-transmission",
    "msrv-ftp",
    "msrv-landing-target",
    "msrv-ping",
    "msrv-path-planning",
    "msrv-battery",
    "msrv-terrain",
    "msrv-tunnel",
    "msrv-open-drone-id",
    "msrv-high-latency",
    "msrv-component-metadata",
    "msrv-payload",
    "msrv-traffic-management",
    "msrv-events-interface",
    "msrv-time-sync",
    "mavspec/msrv-all",
]
## Heartbeat protocol support
msrv-heartbeat = ["msrv", "mavspec/msrv-heartbeat"]
## Mission protocol support
msrv-mission = ["msrv", "mavspec/msrv-mission"]
## Parameter protocol support
msrv-parameter = ["msrv", "mavspec/msrv-parameter"]
## Extended parameter protocol support
msrv-parameter-ext = ["msrv", "mavspec/msrv-parameter-ext"]
## Command protocol support
msrv-command = ["msrv", "mavspec/msrv-command"]
## Manual control protocol support
msrv-manual-control = ["msrv", "mavspec/msrv-manual-control"]
## Camera protocol v2 support
msrv-camera = ["msrv", "mavspec/msrv-camera"]
## Gimbal protocol v1 support
msrv-gimbal-v1 = ["msrv", "mavspec/msrv-gimbal-v1"]
## Gimbal protocol v2 support
msrv-gimbal-v2 = ["msrv", "mavspec/msrv-gimbal-v2"]
## Arm authorization protocol support
msrv-arm-auth = ["msrv", "mavspec/msrv-arm-auth"]
## Image transmission protocol support
msrv-image-transmission = ["msrv", "mavspec/msrv-image-transmission"]
## File transfer protocol support
msrv-ftp = ["msrv", "mavspec/msrv-ftp"]
## Landing target protocol support
msrv-landing-target = ["msrv", "mavspec/msrv-landing-target"]
## Ping protocol support
msrv-ping = ["msrv", "mavspec/msrv-ping"]
## Path planning protocol support
msrv-path-planning = ["msrv", "mavspec/msrv-path-planning"]
## Battery protocol support
msrv-battery = ["msrv", "mavspec/msrv-battery"]
## Terrain protocol support
msrv-terrain = ["msrv", "mavspec/msrv-terrain"]
## Tunnel protocol support
msrv-tunnel = ["msrv", "mavspec/msrv-tunnel"]
## Open Drone ID protocol support
msrv-open-drone-id = ["msrv", "mavspec/msrv-open-drone-id"]
## High latency protocol support
msrv-high-latency = ["msrv", "mavspec/msrv-high-latency"]
## Component metadata protocol support
msrv-component-metadata = ["msrv", "mavspec/msrv-component-metadata"]
## Payload protocol support
msrv-payload = ["msrv", "mavspec/msrv-payload"]
## Traffic management protocol support
msrv-traffic-management = ["msrv", "mavspec/msrv-traffic-management"]
## Events interface protocol support
msrv-events-interface = ["msrv", "mavspec/msrv-events-interface"]
## Time synchronization protocol support
msrv-time-sync = ["msrv", "mavspec/msrv-time-sync"]

#==========================================================
#! ## Additional MAVLink tools
#==========================================================
#! These features will enable additional MAVLink utilities such as `*.waypoints` files support, mission planninc, etc.
#!
#! ⚠️ All such features require `unstable` feature to be enabled in order to take effect.

## All MAVLink microservices utils
##
## ⚠️ Requires `unstable` feature to take effect.
msrv-utils-all = [
    "msrv-utils-mission",
    "mavspec/msrv-utils-all",
]
## Mission protocol utils
##
## ⚠️ Requires `unstable` feature to take effect.
msrv-utils-mission = [
    "msrv-utils",
    "msrv-mission",
    "dlct-common",
    "mavspec/msrv-utils-mission",
]

#==========================================================
#! ## MAVLink message definitions
#==========================================================
#! These features control whether and how MAVLink message definitions generated by
#! [MAVInspect](https://crates.io/crates/mavspec) will be bundled.
#!
#! ⚠️ While being useful for ground control stations, the generated definitions is quite large and may bloat the size of
#! the binary.

## Bundles MAVLink message definitions.
##
## Message definitions will be generated only for bundled MAVLink dialects. Microservices will be ignored as they are
## just subsets of existing dialects.
##
## ⚠️ This feature won't compile without `std` feature enabled.
definitions = [
    "mavspec/definitions",
]

#==========================================================
#! ## Technical features
#==========================================================
#! These features should not be used directly.

## ⊛ Enable MAVLink microservices support
##
## Do not use directly as this feature does not give access to any specific functionality by itself. Instead, use one of
## `msrv-*` features.
msrv = ["mavspec/msrv"]

## ⊛️ Enables MAVLink microservices extra utils
##
## Do not use directly as this feature does not give access to any specific functionality by itself. Instead, use one of
## `msrv-utils-*` features.
msrv-utils = ["msrv", "mavspec/msrv-utils"]

###########################################################
# Metadata
###########################################################
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.cargo-machete]
ignored = ["serde_arrays"]
